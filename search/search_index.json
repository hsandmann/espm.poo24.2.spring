{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#microsservicos","title":"Microsservi\u00e7os","text":"<p>Microservi\u00e7os s\u00e3o uma abordagem de arquitetura de software em que uma aplica\u00e7\u00e3o \u00e9 composta por pequenos servi\u00e7os independentes, cada um com uma fun\u00e7\u00e3o espec\u00edfica e que se comunicam entre si, geralmente por meio de APIs (normalmente REST ou mensageria). Diferente da arquitetura monol\u00edtica, onde todos os componentes de uma aplica\u00e7\u00e3o s\u00e3o executados em uma \u00fanica estrutura, os microservi\u00e7os s\u00e3o distribu\u00eddos e independentes.</p> <p>Caracter\u00edsticas</p> <ul> <li> <p>Descentraliza\u00e7\u00e3o: Cada servi\u00e7o \u00e9 desenvolvido, implementado e gerido de forma independente. Cada equipe pode ser respons\u00e1vel por um ou mais microservi\u00e7os.</p> </li> <li> <p>Autonomia: Cada microservi\u00e7o tem seu pr\u00f3prio ciclo de vida, sendo versionado, testado e implementado de maneira isolada.</p> </li> <li> <p>Escalabilidade: Os microservi\u00e7os podem ser escalados individualmente. Se um servi\u00e7o tiver mais demanda que os outros, apenas ele pode ser escalado sem a necessidade de escalar a aplica\u00e7\u00e3o inteira.</p> </li> <li> <p>Especializa\u00e7\u00e3o: Cada microservi\u00e7o \u00e9 projetado para realizar uma tarefa espec\u00edfica, o que permite que seja mais simples e eficiente em seu escopo limitado.</p> </li> <li> <p>Comunica\u00e7\u00e3o via APIs: Normalmente, a comunica\u00e7\u00e3o entre os microservi\u00e7os acontece via APIs RESTful, mas tamb\u00e9m pode ocorrer por mensageria, como RabbitMQ, Kafka ou outros sistemas de filas.</p> </li> </ul> <p>Vantagens</p> <ul> <li> <p>Escalabilidade independente: Como os microservi\u00e7os s\u00e3o independentes, \u00e9 poss\u00edvel escalar apenas os servi\u00e7os que necessitam de mais recursos. Isso otimiza o uso de infraestrutura e melhora a efici\u00eancia operacional.</p> </li> <li> <p>Facilidade de manuten\u00e7\u00e3o e desenvolvimento: Como os microservi\u00e7os s\u00e3o pequenos e focados em uma tarefa, \u00e9 mais f\u00e1cil compreender, manter e evoluir cada parte do sistema. Isso resulta em ciclos de desenvolvimento mais curtos e mais efici\u00eancia na adi\u00e7\u00e3o de novas funcionalidades.</p> </li> <li> <p>Desenvolvimento e implanta\u00e7\u00e3o paralelos: Equipes podem trabalhar simultaneamente em diferentes microservi\u00e7os sem interferir umas nas outras, o que acelera o desenvolvimento. Al\u00e9m disso, \u00e9 poss\u00edvel fazer o deploy de um servi\u00e7o individual sem afetar a aplica\u00e7\u00e3o inteira.</p> </li> <li> <p>Resili\u00eancia: Um problema em um microservi\u00e7o n\u00e3o necessariamente derruba toda a aplica\u00e7\u00e3o. O isolamento entre eles permite que falhas sejam contidas em um \u00fanico servi\u00e7o, mantendo o restante da aplica\u00e7\u00e3o funcionando.</p> </li> <li> <p>Flexibilidade tecnol\u00f3gica: Cada microservi\u00e7o pode ser desenvolvido em linguagens de programa\u00e7\u00e3o diferentes ou com tecnologias diferentes, dependendo das necessidades espec\u00edficas, sem impor uma \u00fanica stack tecnol\u00f3gica para toda a aplica\u00e7\u00e3o.</p> </li> <li> <p>Reutiliza\u00e7\u00e3o: Microservi\u00e7os podem ser reutilizados em diferentes projetos ou contextos, o que promove uma economia de esfor\u00e7o no desenvolvimento de novas aplica\u00e7\u00f5es.</p> </li> <li> <p>Atualiza\u00e7\u00f5es sem downtime: Como os microservi\u00e7os podem ser implantados de maneira independente, \u00e9 poss\u00edvel atualizar partes da aplica\u00e7\u00e3o sem precisar derrubar o sistema inteiro.</p> </li> </ul> <p>Desafios</p> <ul> <li> <p>Complexidade de comunica\u00e7\u00e3o: A comunica\u00e7\u00e3o entre microservi\u00e7os pode ser um ponto complexo e exige aten\u00e7\u00e3o especial em rela\u00e7\u00e3o \u00e0 lat\u00eancia e consist\u00eancia de dados.</p> </li> <li> <p>Gerenciamento de dados distribu\u00eddos: Como cada microservi\u00e7o pode ter seu pr\u00f3prio banco de dados, manter a consist\u00eancia e integridade dos dados distribu\u00eddos pode ser desafiador.</p> </li> <li> <p>Orquestra\u00e7\u00e3o e monitora\u00e7\u00e3o: Em um ambiente com muitos microservi\u00e7os, monitorar e orquestrar todos os servi\u00e7os de maneira eficaz pode ser dif\u00edcil. \u00c9 necess\u00e1rio um bom sistema de monitoramento e logs distribu\u00eddos para garantir o bom funcionamento da aplica\u00e7\u00e3o como um todo.</p> </li> <li> <p>Gerenciamento de depend\u00eancias: A medida que os microservi\u00e7os se interconectam, h\u00e1 a necessidade de gerenciar depend\u00eancias entre eles, o que pode aumentar a complexidade.</p> </li> </ul> <p>Os microservi\u00e7os s\u00e3o uma escolha popular para aplica\u00e7\u00f5es complexas, que precisam de escalabilidade e evolu\u00e7\u00e3o constante. Eles se encaixam bem em ambientes de DevOps e na cultura de integra\u00e7\u00e3o e entrega cont\u00ednuas (CI/CD).</p> Diagrama ilustrativo de uma arquitetura de microservi\u00e7os, destacando conceitos como escalabilidade, resili\u00eancia, flexibilidade, autonomia e implanta\u00e7\u00e3o independente. Fonte: Ilustra\u00e7\u00e3o criada pelo ChatGPT a partir de uma explica\u00e7\u00e3o t\u00e9cnica. <p>Para conectar os microservi\u00e7os e fazer com que operem com o m\u00ednimo de seguran\u00e7a \u00e9 necess\u00e1rio implementar uma estrat\u00e9gica de acesso a todos os servi\u00e7os. A figura abaixo ilustra a arquitetura de um sistema de microsservi\u00e7os com um gateway de API.</p> <pre><code>flowchart LR\n  subgraph Client\n    direction LR\n    Web\n    Mobile\n    Desktop\n  end\n  subgraph Microservices\n    direction LR\n    gateway[\"Gateway\"]\n    subgraph Essentials\n      direction TB\n      discovery[\"Discovery\"]\n      auth[\"Auth\"]\n    end\n    subgraph Businesses\n      direction TB\n      ms1[\"Service 1\"]\n      ms2[\"Service 2\"]\n      ms3[\"Service 3\"]\n    end\n  end\n  Client --&gt; lb[\"Load Balance\"] --&gt; gateway --&gt; Businesses\n  gateway --&gt; auth\n  gateway --&gt; discovery</code></pre>"},{"location":"#arquitetura-limpa","title":"Arquitetura Limpa","text":"<p>Em uma solu\u00e7\u00e3o de microsservi\u00e7os, a arquitetura do sistema \u00e9 dividida em camadas, onde cada camada tem uma responsabilidade espec\u00edfica. A arquitetura limpa \u00e9 uma abordagem que prop\u00f5e uma separa\u00e7\u00e3o clara entre as camadas do sistema, de forma que a l\u00f3gica de neg\u00f3cio seja independente de detalhes de implementa\u00e7\u00e3o, como frameworks, bibliotecas ou banco de dados<sup>1</sup>.</p> Ilustra\u00e7\u00e3o dos conceitos de arquitetura limpa e suas \"camadas\". Fonte: The Clean Architecture. <pre><code>sequenceDiagram\n    title Clean architecture's approach    \n    Actor User\n    User -&gt;&gt;+ Controller: \n    Controller -&gt;&gt;+ Service: parser\n    Service -&gt;&gt;+ Repository: parser\n    Repository -&gt;&gt;+ Postgres: \n    Postgres -&gt;&gt;- Repository: \n    Repository -&gt;&gt;- Service: parser\n    Service -&gt;&gt;- Controller: parser\n    Controller -&gt;&gt;- User: </code></pre>"},{"location":"#criando-um-microsservico-com-spring-boot","title":"Criando um Microsservi\u00e7o com Spring Boot","text":"<p>Initializr \u00e9 uma ferramenta web que permite que voc\u00ea crie rapidamente um projeto Spring Boot. Voc\u00ea pode selecionar as depend\u00eancias que deseja incluir em seu projeto, como Spring Web, JPA, Spring Data MongoDB, entre outras. Intializr</p>"},{"location":"#compilando-com-maven","title":"Compilando com Maven","text":"mvn clean package spring-boot:run"},{"location":"#dockerizando-o-microsservico","title":"Dockerizando o Microsservi\u00e7o","text":"compose.yaml<pre><code>name: store\n\nservices:\n\n  db:\n    image: postgres:latest\n    environment:\n      POSTGRES_DB: store\n      POSTGRES_USER: store\n      POSTGRES_PASSWORD: store\n    ports:\n      - 5432:5432\n\n  mysql-db:\n    image: mysql:latest\n    environment:\n      MYSQL_ROOT_PASSWORD: store\n      MYSQL_DATABASE: store\n      MYSQL_USER: store\n      MYSQL_PASSWORD: store\n    ports:\n      - 3306:3306\n</code></pre>"},{"location":"#referencias","title":"Refer\u00eancias","text":"<ol> <li> <p>The Clean Architecture \u21a9</p> </li> <li> <p>Apache Maven Project \u21a9</p> </li> <li> <p>Maven Repository \u21a9</p> </li> </ol>"},{"location":"account/","title":"Account","text":"<p>1.</p> <p>Primeiro passo \u00e9 criar o projeto no Spring Boot, para isso \u00e9 aconselh\u00e1vel utilizar o gerador de projetos que pode ser acessado atrav\u00e9s do link Spring Initializr.</p> <pre><code>classDiagram\n    namespace account {\n        class AccountController {\n            +create(AccountIn accountIn): AccountOut\n            +delete(String id): void\n            +findAll(): List&lt;AccountOut&gt;\n            +findById(String id): AccountOut\n        }\n        class AccountIn {\n            -String name\n            -String email\n            -String password\n        }\n        class AccountOut {\n            -String id\n            -String name\n            -String email\n        }\n    }\n    namespace service {\n        class AccountResource {\n            +create(AccountIn accountIn): AccountOut\n            +delete(String id): void\n            +findAll(): List&lt;AccountOut&gt;\n            +findById(String id): AccountOut\n        }\n        class AccountService {\n            +create(AccountIn accountIn): AccountOut\n            +delete(String id): void\n            +findAll(): List&lt;AccountOut&gt;\n            +findById(String id): AccountOut\n        }\n        class AccountRepository {\n            +create(AccountIn accountIn): AccountOut\n            +delete(String id): void\n            +findAll(): List&lt;AccountOut&gt;\n            +findById(String id): AccountOut\n        }\n        class Account {\n            -String id\n            -String name\n            -String email\n            -String password\n        }\n        class AccountModel {\n            +create(AccountIn accountIn): AccountOut\n            +delete(String id): void\n            +findAll(): List&lt;AccountOut&gt;\n            +findById(String id): AccountOut\n        }\n    }\n    &lt;&lt;Interface&gt;&gt; AccountController\n    AccountController ..&gt; AccountIn\n    AccountController ..&gt; AccountOut\n\n    &lt;&lt;Interface&gt;&gt; AccountRepository\n    AccountController &lt;|-- AccountResource\n    AccountResource *-- AccountService\n    AccountService *-- AccountRepository\n    AccountService ..&gt; Account\n    AccountService ..&gt; AccountModel\n    AccountRepository ..&gt; AccountModel</code></pre> Account <pre><code>\ud83d\udcc1 account\n\u251c\u2500\u2500 \ud83d\udcc1 src\n\u2502   \u2514\u2500\u2500 \ud83d\udcc1 main\n\u2502       \u2514\u2500\u2500 \ud83d\udcc1 java\n\u2502           \u2514\u2500\u2500 \ud83d\udcc1 store\n\u2502               \u2514\u2500\u2500 \ud83d\udcc1 account\n\u2502                   \u251c\u2500\u2500 \ud83d\udcc4 AccountController.java\n\u2502                   \u251c\u2500\u2500 \ud83d\udcc4 AccountIn.java\n\u2502                   \u2514\u2500\u2500 \ud83d\udcc4 AccountOut.java\n\u2514\u2500\u2500 \ud83d\udcc4 pom.xml\n</code></pre> pomAccountControllerAccountInAccountOut pom.xml<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt;\n    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;\n    &lt;parent&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;\n        &lt;version&gt;3.3.3&lt;/version&gt;\n        &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;\n    &lt;/parent&gt;\n    &lt;groupId&gt;store&lt;/groupId&gt;\n    &lt;artifactId&gt;account&lt;/artifactId&gt;\n    &lt;version&gt;0.0.1&lt;/version&gt;\n    &lt;name&gt;account&lt;/name&gt;\n    &lt;properties&gt;\n        &lt;java.version&gt;21&lt;/java.version&gt;\n        &lt;spring-cloud.version&gt;2023.0.2&lt;/spring-cloud.version&gt;\n    &lt;/properties&gt;\n    &lt;dependencies&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;\n            &lt;artifactId&gt;lombok&lt;/artifactId&gt;\n            &lt;optional&gt;true&lt;/optional&gt;\n        &lt;/dependency&gt;\n    &lt;/dependencies&gt;\n\n    &lt;dependencyManagement&gt;\n        &lt;dependencies&gt;\n            &lt;dependency&gt;\n                &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n                &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;\n                &lt;version&gt;${spring-cloud.version}&lt;/version&gt;\n                &lt;type&gt;pom&lt;/type&gt;\n                &lt;scope&gt;import&lt;/scope&gt;\n            &lt;/dependency&gt;\n        &lt;/dependencies&gt;\n    &lt;/dependencyManagement&gt;\n\n&lt;/project&gt;\n</code></pre> AccountController.java<pre><code>package store.account;\n\nimport java.util.List;\n\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.RequestBody;\n\npublic interface AccountController {\n\n    @GetMapping(\"/account\")\n    public List&lt;AccountOut&gt; findAll();\n\n    @PostMapping(\"/account\")\n    public void create(@RequestBody AccountIn in);\n\n}\n</code></pre> AccountIn.java<pre><code>package store.account;\n\nimport lombok.Builder;\nimport lombok.experimental.Accessors;\n\n@Builder @Accessors(fluent = true)\npublic record AccountIn (\n    String name,\n    String email,\n    String password\n) {\n\n}\n</code></pre> AccountOut.java<pre><code>package store.account;\n\nimport lombok.Builder;\nimport lombok.experimental.Accessors;\n\n@Builder @Accessors(fluent = true)\npublic record AccountOut (\n    String id,\n    String name,\n    String email\n) {\n\n}\n</code></pre> <p></p>mvn clean install Service <pre><code>\ud83d\udcc1 account-service\n\u251c\u2500\u2500 \ud83d\udcc1 src\n\u2502   \u2514\u2500\u2500 \ud83d\udcc1 main\n\u2502       \u251c\u2500\u2500 \ud83d\udcc1 java\n\u2502       \u2502   \u2514\u2500\u2500 \ud83d\udcc1 store\n\u2502       \u2502       \u2514\u2500\u2500 \ud83d\udcc1 account\n\u2502       \u2502           \u251c\u2500\u2500 \ud83d\udcc4 AccountApplication.java\n\u2502       \u2502           \u251c\u2500\u2500 \ud83d\udcc4 AccountResource.java\n\u2502       \u2502           \u251c\u2500\u2500 \ud83d\udcc4 AccountService.java\n\u2502       \u2502           \u251c\u2500\u2500 \ud83d\udcc4 AccountRepository.java\n\u2502       \u2502           \u251c\u2500\u2500 \ud83d\udcc4 Account.java\n\u2502       \u2502           \u251c\u2500\u2500 \ud83d\udcc4 AccountModel.java\n\u2502       \u2502           \u2514\u2500\u2500 \ud83d\udcc4 AccountParser.java\n\u2502       \u2514\u2500\u2500 \ud83d\udcc1 resources\n\u2502           \u2514\u2500\u2500 \ud83d\udcc4 application.yaml\n\u251c\u2500\u2500 \ud83d\udcc4 pom.xml\n\u2514\u2500\u2500 \ud83d\udcc4 Dockerfile\n</code></pre> pomapplicationAccountApplicationAccountResource pom.xml<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt;\n    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;\n    &lt;parent&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;\n        &lt;version&gt;3.3.3&lt;/version&gt;\n        &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;\n    &lt;/parent&gt;\n    &lt;groupId&gt;store&lt;/groupId&gt;\n    &lt;artifactId&gt;account-service&lt;/artifactId&gt;\n    &lt;version&gt;0.0.1&lt;/version&gt;\n    &lt;name&gt;account-service&lt;/name&gt;\n    &lt;properties&gt;\n        &lt;java.version&gt;21&lt;/java.version&gt;\n    &lt;/properties&gt;\n    &lt;dependencies&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;\n            &lt;artifactId&gt;lombok&lt;/artifactId&gt;\n            &lt;optional&gt;true&lt;/optional&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.postgresql&lt;/groupId&gt;\n            &lt;artifactId&gt;postgresql&lt;/artifactId&gt;\n            &lt;scope&gt;runtime&lt;/scope&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;store&lt;/groupId&gt;\n            &lt;artifactId&gt;account&lt;/artifactId&gt;\n            &lt;version&gt;${project.version}&lt;/version&gt;\n        &lt;/dependency&gt;\n\n    &lt;/dependencies&gt;\n\n    &lt;build&gt;\n        &lt;plugins&gt;\n            &lt;plugin&gt;\n                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;\n            &lt;/plugin&gt;\n        &lt;/plugins&gt;\n    &lt;/build&gt;\n\n&lt;/project&gt;\n</code></pre> application.yaml<pre><code>server:\n  port: 8081\n\nspring:\n  application:\n    name: account-service\n\n  datasource:\n    url: jdbc:postgresql://localhost:5432/store\n    username: store\n    password: store\n    driver-class-name: org.postgresql.Driver\n</code></pre> AccountApplication.java<pre><code>package store.account;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n@SpringBootApplication\npublic class AccountApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(AccountApplication.class, args);\n    }\n\n}\n</code></pre> AccountResource.java<pre><code>package store.account;\n\nimport java.util.List;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.RequestBody;\nimport org.springframework.web.bind.annotation.RestController;\n\n@RestController\npublic class AccountResource implements AccountController {\n\n    @Autowired\n    private AccountService accountService;\n\n    @Override\n    public List&lt;AccountOut&gt; findAll() {\n        return accountService.findAll().stream().map(AccountParser::to).toList();\n    }\n\n    @Override\n    public void create(@RequestBody AccountIn in) {\n        accountService.create(AccountParser.to(in));\n    }\n\n}\n</code></pre> <p></p>mvn clean package spring-boot:run"}]}